begin model

	begin molecule types
		EGF(EGFRRec)
		IEGFR(EGFRRec)
		EGFR(egf,inhibitor, dimer, tyr~0~p)
		IMEK(MEKRec)
		MEK(inhibitor, st~0~p)
		IPI3K(PI3KRec)
		PI3K(inhibitor, active~0~p)
		IPKC(PKCRec)
		PKC(inhibitor, s~0~p)	
		S_DPD_LB()
		S_DPD_NC()
	end molecule types
		

	begin parameters
		k_egf_f = 1
		k_egf_b = 1

		#dimerization kinetc parameters
		k_dim1_f = 1
		k_dim1_b = 1
		k_dim2_f = 1
		k_dim2_b = 1

		k_iegfr_f = 1
		k_iegfr_b = 1
		k_imek_f = 1
		k_imek_b = 1
		k_ipi3k_f = 1
		k_ipi3k_b = 1
		k_ipck_f = 1
		k_ipck_b = 1
	
		# phosphorylation/dephosphorylation kinetic rate constants
		k_egfr_phos = 1
		k_egfr_dephos = 1

		k_mek_phos = 1
		k_mek_dephos = 1

		k_pkc_phos = 1
		k_pkc_dephos = 1

		k_pi3k_phos = 1
		k_pi3k_dephos = 1

		vnEGFR = 1
		vpEGFR = 1

		vnMEK = 1
		vpMEK = 1

		vnPKC = 1
		vpPKC = 1
		
		vnPI3K = 1
		vpPI3K = 1


		# connection coefficients
		EGFR_to_MEK__FREE
		K_EGFR_MEK__FREE
		EGFR_to_PKC__FREE
		EGFR_to_PI3K__FREE
	
		MEK_to_EGFR__FREE
		MEK_to_PKC__FREE
		MEK_to_PI3K__FREE
		
		PKC_to_EGFR__FREE
		PKC_to_MEK__FREE
		PKC_to_PI3K__FREE

		PI3K_to_EGFR__FREE
		PI3K_to_MEK__FREE
		PI3K_to_PKC__FREE


		# initial concentrations 
		EGF_conc = 1
		# inhibitors
		iEGFR_conc = 1
		iMEK_conc = 1
		iPKC_conc = 1
		iPI3K_conc = 1


		# core module concentrations
		EGFR_conc = 1
		MEK_conc = 1
		PKC_conc = 1
		PI3K_conc = 1


		# DPD trajectory variables
		# slopes for restoring force => f(S)
		m1_lb__FREE
		m2_lb__FREE
		m3_lb__FREE

		m1_nc__FREE
		m2_nc__FREE
		m3_nc__FREE

		# constants for f(S)
		lb_const__FREE
		nc_const__FREE

		# coefficient * ratio, rij*(x/s), for driving force
		b_lb_egfr__FREE
		b_lb_mek__FREE
		b_lb_pkc__FREE
		b_lb_pi3k__FREE

		b_nc_egfr__FREE
		b_nc_mek__FREE
		b_nc_pkc__FREE
		b_nc_pi3k__FREE

		# Stable steady states (luminal/basal)
		S_L__FREE
		S_B__FREE

		# Normal/Cancerous
		S_N__FREE
		S_C__FREE


	end parameters


	begin seed species
	  EGF(EGFRRec) EGF_conc
	  EGFR(egf, inhibitor, tyr~0) EGFR_conc
	  IEGFR(EGFRRec) iEGFR_conc
	  MEK(inhibitor, st~0) MEK_conc
	  IMEK(MEKRec) iMEK_conc
	  PKC(inhibitor, s~0) PKC_conc
	  IPKC(PKCRec) iPKC_conc
	  PI3K(inhibitor, active~0) PI3K_conc
	  IPI3K(PI3KRec) iPI3K_conc
	  S_DPD_LB() 0
	  S_DPD_NC() 0
	  

	end seed species
	


	begin observables

		# Epidermal Growth Factor Receptor
		Molecules nEGFR EGFR(tyr~0)
		Molecules pEGFR EGFR(tyr~p)
		Molecules nEGFR_dimer EGFR(dimer!0, tyr~0).EGFR(dimer!0, tyr~0)
		Molecules pEGFR_dimer EGFR(dimer!0, tyr~p).EGFR(dimer!0, tyr~p)
		Molecules inhEGFR EGFR(inhibitor!0).EGF(EGFRRec!0)

		Molecules nPKC PKC(s~0)
		Molecules pPKC PKC(s~p)
		Molecules nMEK MEK(st~0)
		Molecules pMEK MEK(st~p)
		Molecules nPI3K PI3K(active~0)
		Molecules pPI3K PI3K(active~p)
		
		# inhibitor species
		Species i_EGFR IEGFR(EGFRRec)
		Species i_MEK IMEK(MEKRec)
		Species  i_PI3K IPI3K(IPI3KRec)
		Species  i_PKC IPKC(IPKCRec)

		# DPD values
		Species S_LB S_DPD_LB()
		Species S_NC S_DPD_NC()

	end observables


	begin functions
		# hyperbolic multipliers indicate strength of connections between modules
		# 1 + Y_x_y * (Y_a / K_x_y)
		# --------
		# 1 + Y_a / K_x_y

		# active proteins influencing EGFR
		a_MEK_to_EGFR() = ((1.0 + MEK_to_EGFR * (pMEK/K_MEK_EGFR)) / (1.0 + pMEK/K_MEK_EGFR))  
		a_PKC_to_EGFR() = ((1.0 + PKC_to_EGFR * (pMEK/K_PKC_EGFR)) / (1.0 + pPKC/K_PKC_EGFR))
		a_PI3K_to_EGFR() = ((1.0 + PI3K_to_EGFR * (pPI3K/K_PI3K_EGFR)) / (1.0 + pPI3K/K_PI3K_EGFR))

		# active proteins influencing MEK
		a_EGFR_to_MEK() = ((1.0 + EGFR_to_MEK * (pEGFR/K_EGFR_MEK)) / (1.0 + pEGFR/K_EGFR_MEK))  	
		a_PKC_to_MEK() = ((1.0 + PKC_to_MEK * (pPKC/K_PKC_MEK)) / (1.0 + pPKC/K_PKC_MEK))  	
		a_PI3K_to_MEK() = ((1.0 + PI3K_to_MEK * (pPI3K/K_PI3K_MEK)) / (1.0 + pPI3K/K_PI3K_MEK))  	

		# active proteins influencing PKC
		a_EGFR_to_PKC() = ((1.0 + EGFR_to_PKC * (pEGFR/K_EGFR_PKC)) / (1.0 + pEGFR/K_EGFR_PKC))
		a_MEK_to_PKC() = ((1.0 + MEK_to_PKC * (pMEK/K_MEK_PKC)) / (1.0 + pMEK/K_MEK_PKC))
		a_PI3K_to_PKC() = ((1.0 + PI3K_to_PKC * (pPI3K/K_PI3K_PKC)) / (1.0 + pPI3K/K_PI3K_PKC))

		# active proteins influencing PI3K
		a_EGFR_to_PI3K() = ((1.0 + EGFR_to_PI3K * (pEGFR/K_EGFR_PI3K)) / (1.0 + pEGFR/K_EGFR_PI3K)) 
		a_MEK_to_PI3K() = ((1.0 + MEK_to_PI3K * (pEGFR/K_MEK_PI3K)) / (1.0 + pMEK/K_MEK_PI3K)) 
		a_PKC_to_PI3K() = ((1.0 + PKC_to_PI3K * (pEGFR/K_PKC_PI3K)) / (1.0 + pPKC/K_PKC_PI3K)) 


		# inhibitor factors
		inh_EGFR() = (1.0 / (1.0 + i_EGFR))
		inh_PI3K() = (1.0 / (1.0 + i_PI3K))
		inh_MEK() = (1.0 / (1.0 + i_MEK))
		inh_PKC() = (1.0 / (1.0 + i_PKC))
		

		# inactive and active initial kinetic rates (prior to hyperbolic multipliers)
		kr_nEGFR() = ((vnEGFR/k_egfr_dephos) / (1.0 + (pEGFR / k_egfr_dephos))) 
		kr_pEGFR() = ((vpEGFR/k_egfr_phos) / (1.0 + (nEGFR / k_egfr_phos)))
		
		kr_nMEK() = ((vnMEK / k_mek_dephos) / (1.0 + (pMEK / k_mek_dephos)))
		kr_pMEK() = ((vpMEK / k_mek_phos) / (1.0 + (nMEK / k_mek_phos)))
		
		kr_nPKC() = ((vnPKC / k_pkc_dephos) / (1.0 + (pPKC / k_pkc_dephos)))
		kr_pPKC() = ((vpPKC / k_pkc_phos) / (1.0 + (nPKC / k_pkc_phos))) 

		kr_nPI3K() = ((vnPI3K / k_pi3k_dephos) / (1.0 + (pPI3K / k_pi3k_dephos)))
		kr_pPI3K() = ((vpPI3K / k_pi3k_phos) / (1.0 + (nPI3K / k_pi3k_phos)))

		
		# Driving force for LB DPD
		driving_force_lb() = ((b_lb_egfr * pEGFR) + (b_lb_mek * pMEK) + (b_lb_pkc * pPKC) + (b_lb_pi3k * pPI3K))
		driving_force_canc() = ((b_nc_egfr * pEGFR) + (b_nc_mek * pMEK) + (b_nc_pkc * pPKC) + (b_nc_pi3k * pPI3K))
		# Restoring force -- modelled using linear approx. of derivative of quartic potential (two stable states). 
		# I approx. by taking the distance between extrema and roots of cubic to be equal across the function. 
		# Hence we end up with three slopes, which can then be plugged into line formula to give linear approximations for the force.
		# The constant value I have added for mathematical formalism. We may not even need it for the approximation to work.
		# However, I am reluctant to remove it until I have finished the optimization.
		restoring_force_lb() = (if(S_LB < ((3*S_L + S_B)/4.0, m1_lb * (S_LB - S_L)), if(S_LB > ((3*S_B + S_L)/4.0, m3_lb * (S_LB - S_B)),(m2_lb * S_LB))) + lb_const)
		restoring_force_canc() = (if(S_NC < ((3*S_N + S_C)/4.0, m1_nc*(S_NC - S_N)), if(S_NC > ((3*S_C + S_N)/4.0, m3_nc*(S_NC - S_C))),(m2_nc * S_NC)) + nc_const)		
		
	end functions

	begin reaction rules
		# EGFR modelling
		# EGFR binds to inhibitor
		# coarse-grained EGFR model --> ligand binding initiates dimerization
		EGFR(egf) + EGF(EGFRRec) <-> EGFR(egf!0).EGF(EGFRRec!0) k_egf_f, k_egf_b
		# dimerization case 1 -> ligand 1 binds and causes dimerization
		EGFR(egf!+, dimer) + EGFR(egf, dimer) <-> EGFR(egf!+, dimer!0).EGFR(egf, dimer!0) k_dim1_f, k_dim1_b
		# dimerization case 2 -> both ligands bind and cause dimerization
		EGFR(egf!+, dimer) + EGFR(egf!+, dimer) <-> EGFR(egf!+, dimer!0).EGFR(egf!+, dimer!0) k_dim2_f, k_dim2_b
		# dimer dissociation
		EGFR(dimer!0).EGFR(dimer!0) -> EGFR(dimer) + EGFR(dimer) k_r_dim
		# activation through phosphorylation
		EGFR(dimer!+, tyr~0) -> EGFR(dimer!+, tyr~p) (a_MEK_to_EGFR() * a_PKC_to_EGFR() * a_PI3K_to_EGFR() * inh_EGFR() * kr_pEGFR() )
		EGFR(dimer, tyr~p) -> EGFR(dimer, tyr~0) ( kr_nEGFR() )
		#inhibition
		EGFR(inhibitor) + IEGFR(EGFRRec) <-> EGFR(inhibitor!0).IEGFR(EGFRRec!0) k_iegfr_f, k_iegfr_b		

		# MEK
		MEK(st~0) -> MEK(st~p) (a_EGFR_to_MEK() * a_PI3K_to_MEK() * a_PKC_to_MEK() * inh_MEK() * kr_pMEK() )
		MEK(st~p) -> MEK(st~0) ( kr_nMEK() )
		MEK(inhibitor) + IMEK(MEKRec) <-> MEK(inhibitor!0).IMEK(MEKRec!0) k_imek_f, k_imek_b

		# PKC
		PKC(s~0) -> PKC(s~p)  (a_EGFR_to_PKC() * a_MEK_to_PKC() * a_PI3K_to_PKC() * inh_PKC() * kr_pPKC() )
		PKC(s~p) -> PKC(s~0)  ( kr_nPKC() )
		PKC(inhibitor) + IPKC(PKCRec) <-> PKC(inhibitor!0).IPKC(PKCRec!0) k_ipkc_f, k_ipkc_b

		# PI3K
		# phosphorylation
		PI3K(active~0) -> PI3K(active~p) ((a_EGFR_to_PI3K() * a_MEK_to_PI3K() * a_PKC_to_PI3K() * inh_PI3K()) * kr_pPI3K() )
		PI3K(active~p) -> PI3K(active~0) ( kr_nPI3K() )
		# inhibition
		PI3K(inhibitor) + IPI3K(PI3KRec) <-> PI3K(inhibitor!0).IPI3K(PI3KRRec!0) k_ipi3k_f, k_ipi3k_b

		Null -> S_DPD_LB() (driving_force_lb()+restoring_force_lb()) 
		Null -> S_DPD_NC() (driving_force_canc()+restoring_force_canc())

	end reaction rules

end model
